generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

enum UserRole {
  SUPPLIER
  ORGANIZATION
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  address       Address?
  role          UserRole  @default(SUPPLIER)
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  expenses      Expense[]
  processes     Process[]
  products      Product[]
  colors        Color[]

  @@map(name: "users")
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map("addresses")
}

enum Units {
  KILOGRAM
  LITER
}

model Product {
  id             String    @id @default(cuid())
  name           String
  description    String?
  weight         Float?
  unit           Units     @default(KILOGRAM)
  cost           Float?
  expirationDate DateTime? @map(name: "expiration_at")
  productionDate DateTime? @map(name: "production_at")
  isHazardous    Boolean?
  isRecyclable   Boolean?
  isOrganic      Boolean?
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  tasks          Task[]
  Process        Process[]
  colorId        String?
  color          Color?    @relation(fields: [colorId], references: [id])

  @@map(name: "products")
}

enum Status {
  TODO
  DONE
  IN_PROGRESS
  CANCELED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          String   @id @default(cuid())
  title       String
  scheduledAt DateTime @default(now()) @map(name: "scheduled_at")
  status      Status   @default(TODO)
  priority    Priority @default(LOW)
  notes       String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])

  @@map("tasks")
}

model Color {
  id        String    @id @default(cuid())
  name      String
  value     String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  @@map("colors")
}

enum ExpenseCategory {
  SUPPLIES
  LABOR
  EQUIPMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

model Expense {
  id            String          @id @default(cuid())
  description   String
  amount        Float
  date          DateTime
  category      ExpenseCategory @default(LABOR)
  PaymentStatus PaymentStatus   @default(PENDING)
  notes         String?
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  processId     String          @unique
  process       Process         @relation(fields: [processId], references: [id])
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @default(now()) @map(name: "updated_at")

  @@map("expenses")
}

model Process {
  id          String    @id @default(cuid())
  name        String
  description String
  duration    Int?
  temperature Float?
  humidity    Float?
  pressure    Float?
  startDate   DateTime?
  status      Status    @default(TODO)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  expense     Expense[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")

  @@map("processes")
}
